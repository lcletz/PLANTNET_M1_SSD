}
# Define ZIP file source & destination
zip_url <- "https://zenodo.org/record/10782465/files/plantnet_swe.zip"
zip_path <- file.path(tempdir(), "plantnet_swe.zip")
# Download the ZIP file
download.file(zip_url, zip_path, mode = "wb")
# Target JSON files inside ZIP
target_files <- c("zenodo/aggregation/ai_answers.json",
"zenodo/aggregation/ai_classes.json",
"zenodo/aggregation/ai_scores.json",
"zenodo/converters/classes.json",
"zenodo/converters/tasks.json")
# Output paths for extracted JSON files
output_files <- file.path(dir_path, basename(target_files))
unique_dirs <- unique(dirname(output_files))
for (dir in unique_dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
}
# Extract only the required files
unzip(zip_path, files = target_files, exdir = dir_path, junkpaths = TRUE)
# Process each extracted JSON file (Read first 20,000 lines safely)
extract_limited_lines <- function(file_path, num_lines = 20000) {
con <- file(file_path, "r")  # Open file connection
lines <- character(0)
for (i in seq_len(num_lines)) {
line <- tryCatch(readLines(con, n = 1, warn = FALSE),
error = function(e) return(NULL))
if (is.null(line) || length(line) == 0) {
break
}
lines <- c(lines, line)
}
close(con)  # Close connection
if (length(lines) > 0) {
last_line <- trimws(lines[length(lines)])
if (grepl(",$", last_line)) {
lines[length(lines)] <- sub(",$", "", last_line)
}
if (!grepl("}$", last_line)) {
lines[length(lines)] <- paste0(last_line, "}")
}
writeLines(lines, output_file)
message(sprintf("Successfully saved %d lines in %s!", length(lines), output_file))
} else {
message(sprintf("No data found in %s!", file_path))
}
}
# Apply function to each extracted file
for (file in output_files) {
extract_limited_lines(file)
}
library(jsonlite)
# Setup directories
subDir <- "extracted_data"
mainDir <- getwd()  # Use current working directory
dir_path <- file.path(mainDir, subDir)
if (!dir.exists(dir_path)) {
dir.create(dir_path, recursive = TRUE, showWarnings = FALSE)
}
# Define ZIP file source & destination
zip_url <- "https://zenodo.org/record/10782465/files/plantnet_swe.zip"
zip_path <- file.path(tempdir(), "plantnet_swe.zip")
# Download the ZIP file
download.file(zip_url, zip_path, mode = "wb")
# Target JSON files inside ZIP
target_files <- c("zenodo/aggregation/ai_answers.json",
"zenodo/aggregation/ai_classes.json",
"zenodo/aggregation/ai_scores.json",
"zenodo/converters/classes.json",
"zenodo/converters/tasks.json")
# Output paths for extracted JSON files
output_files <- file.path(dir_path, basename(target_files))
unique_dirs <- unique(dirname(output_files))
for (dir in unique_dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
}
# Extract only the required files
unzip(zip_path, files = target_files, exdir = dir_path, junkpaths = TRUE)
# Process each extracted JSON file (Read first 20,000 lines safely)
extract_limited_lines <- function(file_path, num_lines = 20000) {
con <- file(file_path, "r")  # Open file connection
lines <- character(0)
for (i in seq_len(num_lines)) {
line <- tryCatch(readLines(con, n = 1, warn = FALSE),
error = function(e) return(NULL))
if (is.null(line) || length(line) == 0) {
break
}
lines <- c(lines, line)
}
close(con)  # Close connection
if (length(lines) > 0) {
last_line <- trimws(lines[length(lines)])
if (grepl(",$", last_line)) {
lines[length(lines)] <- sub(",$", "", last_line)
}
if (!grepl("}$", last_line)) {
lines[length(lines)] <- paste0(last_line, "}")
}
writeLines(lines, file_path)
message(sprintf("Successfully saved %d lines in %s!", length(lines), file_path))
} else {
message(sprintf("No data found in %s!", file_path))
}
}
# Apply function to each extracted file
for (file in output_files) {
extract_limited_lines(file)
}
zip_url_300 <- "https://zenodo.org/records/4726653/files/plantnet_300K.zip"
zip_path_300 <- file.path(tempdir(), "plantnet_300K.zip")
download.file(zip_url_300, zip_path_300, mode = "wb")
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tibble)
# Traitement des 18847 lignees de données :
ai_answers <- fromJSON("../extracted_data/ai_answers.json")
# Traitement des 18847 lignees de données :
ai_answers <- fromJSON("extracted_data/ai_answers.json")
library(jsonlite)
subDir <- "extracted_data"
mainDir <- getwd()
dir_path <- file.path(mainDir, subDir)
if (!dir.exists(dir_path)) {
dir.create(dir_path, recursive = TRUE, showWarnings = FALSE)
}
zip_url <- "https://zenodo.org/record/10782465/files/plantnet_swe.zip"
zip_path <- file.path(tempdir(), "plantnet_swe.zip")
download.file(zip_url, zip_path, mode = "wb")
target_files <- c("zenodo/aggregation/ai_answers.json",
"zenodo/aggregation/ai_classes.json",
"zenodo/aggregation/ai_scores.json",
"zenodo/converters/classes.json",
"zenodo/converters/tasks.json")
output_files <- file.path(dir_path, basename(target_files))
unique_dirs <- unique(dirname(output_files))
for (dir in unique_dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
}
unzip(zip_path, files = target_files, exdir = dir_path, junkpaths = TRUE)
extract_limited_lines <- function(file_path, num_lines = 20000) {
con <- file(file_path, "r")
lines <- character(0)
for (i in seq_len(num_lines)) {
line <- tryCatch(readLines(con, n = 1, warn = FALSE),
error = function(e) return(NULL))
if (is.null(line) || length(line) == 0) {
break
}
lines <- c(lines, line)
}
close(con)
if (length(lines) > 0) {
last_line <- trimws(lines[length(lines)])
last_line <- sub(",$", "", last_line)
if (!grepl("}$", last_line)) {
last_line <- paste0(last_line, "}")
}
lines[length(lines)] <- last_line
writeLines(lines, file_path)
message(sprintf("Successfully saved %d lines in %s!", length(lines), file_path))
} else {
message(sprintf("No data found in %s!", file_path))
}
}
for (file in output_files) {
extract_limited_lines(file)
}
#zip_url_300 <- "https://zenodo.org/records/4726653/files/plantnet_300K.zip"
#zip_path_300 <- file.path(tempdir(), "plantnet_300K.zip")
#download.file(zip_url_300, zip_path_300, mode = "wb")
#target_file_300 <- c("plantnet_300K/plantnet300K_metadata.json")
#output_file_300 <- file.path(dir_path, basename(target_file_300))
#extract_limited_lines(output_file_300)
# Traitement des 18847 lignees de données :
ai_answers <- fromJSON("extracted_data/ai_answers.json")
ai_answers_df <- data.frame(matrix(unlist(ai_answers), byrow=TRUE), stringsAsFactors=FALSE)
ai_answers_df <- rownames_to_column(ai_answers_df, var = "obs_id")
colnames(ai_answers_df) <- c("obs_id","plant_id")
# obs ID + predicted class ID
ai_classes <- fromJSON("../extracted_data/ai_classes.json")
ai_classes_df <- do.call(rbind, lapply(ai_classes, as.data.frame))
# obs ID + predicted class ID
ai_classes <- fromJSON("extracted_data/ai_classes.json")
ai_classes_df <- do.call(rbind, lapply(ai_classes, as.data.frame))
ai_classes_df <- rownames_to_column(ai_classes_df, var = "plant_class")
colnames(ai_classes_df) <- c('plant_class','plant_id')
# name of predicted class + predicted class ID
ai_scores <- fromJSON("extracted_data/ai_scores.json")
ai_scores_df <- data.frame(matrix(unlist(ai_scores), byrow=TRUE), stringsAsFactors=FALSE)
ai_scores_df <- rownames_to_column(ai_scores_df, var = "obs_id")
colnames(ai_scores_df) <- c('obs_id','score')
plant_counts <- ai_answers_df %>%
count(ai_answers_df[,2])
colnames(plant_counts) <- c("plant_id","count")
merged_df <- ai_classes_df %>%
left_join(plant_counts, by = "plant_id")
merged_df$count[is.na(merged_df$count)] <- 0
top_plants <- merged_df %>% top_n(20, count)
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 20 Most Observed Plants", x = "Plant Name", y = "Observation Count")
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count, colour = '#b4a7d5ff')) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 20 Most Observed Plants", x = "Plant Name", y = "Observation Count")
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count, fill = '#b4a7d5ff')) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 20 Most Observed Plants", x = "Plant Name", y = "Observation Count")
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count, fill = '#b4a7d5ff')) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "Top 20 Most Observed Plants", x = "Plant Name", y = "Observation Count") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_colour_manual('#b4a7d5ff') +
labs(title = "Top 20 Most Observed Plants", x = "Plant Name", y = "Observation Count") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_colour_manual(values = '#b4a7d5ff') +
labs(title = "Top 20 Most Observed Plants", x = "Plant Name", y = "Observation Count") +
theme_minimal()
top_plants <- merged_df %>% top_n(10, count)
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_colour_manual(values = '#b4a7d5ff') +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Observation Count") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_colour_manual(values = '#b4a7d5ff') +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Observation Count") +
theme_minimal()
View(top_plants)
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_fill_manual(values = '#b4a7d5ff') +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Nombre d'observations") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_fill_manual(values = '#b4a7d5ff') +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Nombre d'observations") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count, fill = plant_class)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_fill_manual(values = '#b4a7d5ff') +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Nombre d'observations") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count, fill = plant_class)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
scale_fill_manual(values = '#b4a7d5ff') +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Nombre d'observations") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count, fill = plant_class)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = '#b4a7d5ff') +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Nombre d'observations") +
theme_minimal()
ggplot(top_plants, aes(x = reorder(plant_class, count), y = count, fill = plant_class)) +
geom_bar(stat = "identity", fill = '#b4a7d5ff') +
coord_flip() +
labs(title = "Top 10 des espèces les plus fréquentes", x = "Espèce", y = "Nombre d'observations") +
theme_minimal()
bottom_plants <- merged_df %>%
filter(count > 0) %>%
arrange(count) %>%
slice_head(n = 20) # les 20 plantes les moins observées (observées qu'1 fois dans notre cas)
View(bottom_plants)
not_observed_plants <- merged_df %>% top_n(-1, count)
# Scores du Top 1 :
merged_answers_scores <- ai_answers_df %>%
left_join(ai_scores_df, by = "obs_id")
View(not_observed_plants)
top1_scores <- merged_answers_scores %>% filter(plant_id == 267) %>% select(-2)
plot(top1_scores[,1], top1_scores[,2], xlab="obs_ID", ylab="score")
bottom_obs <- ai_answers_df %>%
inner_join(bottom_plants, by = "plant_id")
bottom_scores <- bottom_obs %>%
left_join(ai_scores_df, by = "obs_id")
bottom_scores %>% summarise(
mean_score = mean(score, na.rm = TRUE),
median_score = median(score, na.rm = TRUE),
min_score = min(score, na.rm = TRUE),
max_score = max(score, na.rm = TRUE),
sd_score = sd(score, na.rm = TRUE),
q25 = quantile(score, 0.25, na.rm = TRUE),
q75 = quantile(score, 0.75, na.rm = TRUE)
)
top_200_plants <- merged_df %>%
arrange(plant_id) %>%
slice_head(n = 200) %>%
select(plant_id, plant_class, count)
top_200_obs <- ai_answers_df %>%
inner_join(top_200_plants, by = "plant_id")
top_200_scores <- top_200_obs %>%
left_join(ai_scores_df, by = "obs_id")
top_200_df <- top_200_scores %>%
group_by(plant_class) %>%
summarise(
count = first(count),
mean_score = mean(score, na.rm = TRUE)
) %>%
arrange(desc(count))
ggplot(top_200_df, aes(x = count, y = mean_score)) +
geom_point(aes(color = plant_class), size = 3) + # une couleur, une plante
#geom_smooth(method = "lm", se = FALSE, color = "blue") + # régression linéaire
labs(
title = "Mean Score by Count for Top 200 Plants",
x = "Count of Observations",
y = "Mean Score"
) +
theme_minimal() +
theme(legend.position = "none")
top_2000_plants <- merged_df %>%
arrange(plant_id) %>%
slice_head(n = 2000) %>%
select(plant_id, plant_class, count)
top_2000_obs <- ai_answers_df %>%
inner_join(top_2000_plants, by = "plant_id")
top_2000_scores <- top_2000_obs %>%
left_join(ai_scores_df, by = "obs_id")
top_2000_df <- top_2000_scores %>%
group_by(plant_class) %>%
summarise(
count = first(count),
mean_score = mean(score, na.rm = TRUE)
) %>%
arrange(desc(count))
ggplot(top_2000_df, aes(y = count, x = mean_score)) +
geom_point(aes(color = plant_class), size = 3) + # une couleur, une plante
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(
title = "Mean Score by Count for Top 2000 Plants",
y = "Count of Observations",
x = "Mean Score"
) +
theme_minimal() +
theme(legend.position = "none")
View(ai_answers)
View(ai_answers)
View(ai_answers_df)
View(ai_classes_df)
View(ai_scores_df)
View(merged_answers_scores)
View(merged_df)
View(merged_answers_scores)
data(iris)
force(iris)
View(iris)
View(ai_answers_df)
View(ai_classes_df)
View(ai_scores_df)
ggplot(top_2000_df, aes(y = count, x = mean_score)) +
geom_point(aes(color = plant_class), size = 3) + # une couleur, une plante
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(
title = "Mean Score by Count for Top 2000 Plants",
y = "Count of Observations",
x = "Mean Score"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(top_2000_df, aes(y = count, x = mean_score)) +
geom_point(aes(color = plant_class), size = 3) + # une couleur, une plante
geom_smooth(method = "loess", se = FALSE, color = "blue") +
labs(
title = "",
y = "Nombre d'observations",
x = "Score moyen"
) +
theme_minimal() +
theme(legend.position = "none")
new_zip_url = "https://lab.plantnet.org/share/external/swe/samples/kswe_20250117_00.tgz"
new_dir = "samples"
unzip(new_zip_url, exdir = new_dir)
new_zip_url <- "https://lab.plantnet.org/share/external/swe/samples/kswe_20250117_00.tgz"
new_dir <- "samples"
tgz_file <- "kswe_20250117_00.tgz"
# If authentication is required, use method="wget" or "curl" with appropriate flags
download.file(new_zip_url, destfile = tgz_file, method = "wget")
library(httr)
new_zip_url <- "https://lab.plantnet.org/share/external/swe/samples/kswe_20250117_00.tgz"
tgz_file <- "kswe_20250117_00.tgz"
# Replace 'your_username' and 'your_password' with actual credentials
response <- GET(new_zip_url, authenticate("your_username", "your_password"))
# Replace 'your_username' and 'your_password' with actual credentials
response <- GET(new_zip_url, authenticate("repro", "cessing"))
if (status_code(response) == 200) {
writeBin(content(response, "raw"), tgz_file)
untar(tgz_file, exdir = "samples")
} else {
print(paste("Failed to download. HTTP status:", status_code(response)))
}
if (status_code(response) == 200) {
writeBin(content(response, "raw"), tgz_file)
untar(tgz_file, exdir = "samples")
} else {
print(paste("Failed to download. HTTP status:", status_code(response)))
}
tasks <- fromJSON("extracted_data/tasks.json")
ai_answers_df <- data.frame(matrix(unlist(ai_answers), byrow=TRUE), stringsAsFactors=FALSE)
View(tasks)
tasks_df <- data.frame(matrix(unlist(tasks), byrow=TRUE), stringsAsFactors=FALSE)
View(tasks_df)
library(jsonlite)
tasks <- fromJSON("extracted_data/tasks.json")
# Extract "name" (first element) and "value" (last element) from each task
tasks_df <- data.frame(
name = sapply(tasks, function(x) x[[1]]),
value = sapply(tasks, function(x) tail(x, 1)),
stringsAsFactors = FALSE
)
View(tasks_df)
# Extract "name" (first element) and "value" (last element) from each task
tasks_df <- data.frame(
obs_id = sapply(tasks, function(x) x[[1]]),
stringsAsFactors = FALSE
)
# Extract "name" (first element) and "value" (last element) from each task
tasks_df <- data.frame(
plant_swe_id = sapply(tasks, function(x) x[[1]]),
stringsAsFactors = FALSE
)
tasks_df <- rownames_to_column(tasks_df, var = "plantnet_id")
tasks_df['plantnet_id'="*0099"]
tasks_df['plantnet_id'="*.0099"]
samples <- fromJSON("samples")
samples <- list.files("~/samples/", pattern="*.json", full.names=TRUE)
samples <- list.files("~/samples/00", pattern="*.json", full.names=TRUE)
samples <- list.files("samples/00", pattern="*.json", full.names=TRUE)
myJSON <- lapply(samples, function(x) rjson::fromJSON(file = x))
samples <- list.files("samples/00/", pattern="*.json", full.names=TRUE)
samples <- list.files("samples/00/00", pattern="*.json", full.names=TRUE)
myJSON <- lapply(samples, function(x) rjson::fromJSON(file = x))
myJSON <- lapply(samples, function(x) fromJSON(file = x))
myJSON <- lapply(samples, function(x) fromJSON(file = x))
myJSON <- lapply(samples, function(x) fromJSON(file = x))
install.packages("rjson")
myJSON <- lapply(samples, function(x) rjson::fromJSON(file = x))
View(myJSON)
dirname("samples/OO")
samples <- list.files("samples/00/", pattern="*.json", full.names=TRUE, include.dirs = TRUE)
samples <- list.files("samples/00", pattern="*.json", full.names=TRUE, include.dirs = TRUE)
samples <- list.files("samples/00", pattern="*.json", full.names=TRUE, recursive = TRUE)
samples <- list.files("samples/00", pattern="*.json", full.names=TRUE, recursive = FALSE)
TRUE
samples <- list.files("samples/00", pattern="*.json", full.names=TRUE, recursive = TRUE)
myJSON <- lapply(samples, function(x) rjson::fromJSON(file = x))
View(myJSON)
samples <- lapply(samples, function(x) rjson::fromJSON(file = x))
View(myJSON)
View(samples)
samples_df <- data.frame(matrix(unlist(samples), byrow=TRUE), stringsAsFactors=FALSE)
View(samples_df)
samples_df <- data.frame(matrix(samples, byrow=TRUE), stringsAsFactors=FALSE)
View(samples_df)
samples_df <- data.frame(matrix(samples), stringsAsFactors=FALSE)
View(samples_df)
samples_df <- data.frame(matrix(samples), stringsAsFactors=TRUE)
samples_df <- data.frame(matrix(samples, byrow = TRUE), stringsAsFactors=TRUE)
View(samples_df[[1]][[1]])
View(samples_df)
typeof(samples)
save(samples, envir = "samples")
save(samples, envir = samples)
save(samples, file = "samples/samples")
save(toJSON(samples), file = "samples/samples")
library(jsonlite)
save(toJSON(samples), file = "samples/samples")
save(jsonlite::toJSON(samples), file = "samples/samples")
samples <- toJSON(samples)
save(samples, file = "samples/samples")
head(samples)
samples <- list.files("samples/00", pattern="*.json", full.names=TRUE, recursive = TRUE)
samples <- lapply(samples, function(x) rjson::fromJSON(file = x))
samples <- lapply(samples, function(x) rjson::fromJSON(file = x))
View(samples)
samples_test <- list.files("samples/00", pattern="*.json", full.names=TRUE, recursive = TRUE)
samples_test <- purrr::map_df(samples_test, function(x) {
purrr::map(jsonlite::fromJSON(x), function(y) ifelse(is.null(y), NA, y))
})
View(samples_test)
type(samples_test)
typeof(samples_test)
View(samples_df)
samples_df_test <- data.frame(matrix(unlist(samples_test$results), byrow=TRUE), stringsAsFactors=FALSE)
View(samples_df_test)
samples_df_test <- data.frame(matrix(unlist(samples_test$results)), stringsAsFactors=FALSE)
samples_df_test <- data.frame(matrix(samples_test$results), stringsAsFactors=FALSE)
samples_df_test <- data.frame(matrix(samples_test$results, byrow=TRUE), stringsAsFactors=FALSE)
View(samples)
