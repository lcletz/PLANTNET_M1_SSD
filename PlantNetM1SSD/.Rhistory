left_join(samples, by = c("plantnet_id" = "file"))
merged_df <- tasks_df %>%
left_join(samples, by = c("plantnet_id" = "file"))
gc()
library(jsonlite)
library(purrr)
library(dplyr)
tasks <- fromJSON("data/tasks.json")
tasks_df <- data.frame(
plant_swe_id = sapply(tasks, function(x) x[[1]]),
stringsAsFactors = FALSE
)
tasks_df <- rownames_to_column(tasks_df, var = "plantnet_id")
samples <- fromJSON("data/samples.json")
samples$file <- sub("\\.json$", "", samples$file)
merged_df <- tasks_df %>%
left_join(samples, by = c("plantnet_id" = "file"))
View(merged_df)
View(merged_df)
View(samples)
merged_df <- tasks_df %>%
left_join(samples, by = c("plantnet_id" = "file"))
View(tasks_df)
merged_df <- tasks_df %>%
join(samples, by = c("plantnet_id" = "file"))
merged_df <- tasks_df %>%
left_join(samples, by = c("plantnet_id" = "file"))
unmatched_in_tasks <- anti_join(tasks_df, samples, by = c("plantnet_id" = "file"))
View(unmatched_in_tasks)
unmatched_in_samples <- anti_join(samples, tasks_df, by = c("file" = "plantnet_id"))
View(unmatched_in_samples)
tasks_df$plantnet_id <- trimws(tasks_df$plantnet_id)
samples$file <- trimws(samples$file)
merged_df <- tasks_df %>%
left_join(samples, by = c("plantnet_id" = "file"))
unmatched_in_tasks <- anti_join(tasks_df, samples, by = c("plantnet_id" = "file"))
unmatched_in_samples <- anti_join(samples, tasks_df, by = c("file" = "plantnet_id"))
rows_with_nulls <- merged_df %>%
filter(if_any(everything(), is.null))
View(rows_with_nulls)
filter(if_any(NULL)
)
rows_with_nulls <- merged_df %>%
filter(if_any(NULL))
View(rows_with_nulls)
rows_with_nulls <- merged_df[apply(merged_df, 1, function(x) any(NULL)), ]
View(rows_with_nulls)
rows_with_nulls <- merged_df[apply(merged_df, 1, function(x) any(is.null(x))), ]
rows_with_null_name <- merged_df %>%
filter(is.null(name))
rows_with_null_name <- merged_df[is.null(merged_df$name), ]
rows_with_nulls <- merged_df %>%
filter('name'==NULL)
rows_with_nulls <- merged_df %>%
filter('name'=NULL)
rows_with_nulls <- merged_df %>%
filter(name=NULL)
rows_with_nulls <- merged_df %>%
filter(name==NULL)
rows_with_nulls <- merged_df %>%
filter(merged_df$name==NULL)
rlang::last_trace()
any(is.na(merged_df$name))
str(merged_df$name)
str(samplesname)
str(samples$name)
samples$name <- sapply(samples$name, function(x) paste(x, collapse = ", "))
samples$id <- sapply(samples$id, function(x) paste(x, collapse = ', '))
samples$score <- sapply(samples$score, function(x) paste(x, collapse = ', '))
merged_df <- tasks_df %>%
left_join(samples, by = c("plantnet_id" = "file"))
unmatched_in_samples <- anti_join(samples, tasks_df, by = c("file" = "plantnet_id"))
unmatched_in_tasks <- anti_join(tasks_df, samples, by = c("plantnet_id" = "file"))
str(samples$name)
help("flatten"
)
help(flatten)
test <- flatten(samples)
View(test)
samples <- fromJSON("data/samples.json")
samples$file <- sub("\\.json$", "", samples$file)
View(samples)
head(samples)
samples[1]
samples[[1]]
samples[,2]
samples[,2][[1]]
samples[[1]]
samples[,c(2,3,4)][[1]]
samples[,4][[1]]
samples[1,][[1]]
samples[1][[1]]
samples[1,2,3,4][[1]]
samples[1,2][[1]]
samples[2,2][[1]]
samples[1,2]
samples[1,1]
samples[1,c(2,3,4)]
help("unstack")
test <- head(samples)
test <- unstack(samples, file ~ name id score)
test <- unstack(samples)
test <- unstack(samples, file ~ name+ id +score)
test <- unstack(samples, select = name)
str(test)
reshape(test, varying = list(2), v.names = 'name')
reshape(test, varying = list(2), v.names = 'name', direction = 'long')
reshape(test, varying = list(2:), v.names = 'name', direction = 'long')
reshape(test, varying = list(2), v.names = 'name', direction = 'long')
gc()
test_re <- reshape(test,
idvar='file',
timevar = c('name','id','score')
direction='wide')
test_re <- reshape(test,
idvar='file',
timevar = c('name','id','score')
direction='long')
test_re <- reshape(test,
idvar='file',
timevar = c('name','id','score'),
direction='long')
test_re <- reshape(test,
idvar='file',
timevar = c('name','id','score'),
direction='wide')
View(test_re)
View(test)
View(test_re)
test_re <- reshape(test,
idvar='file',
timevar = c('name','id','score'),
direction='long')
test_re <- reshape(test,
idvar='file',
timevar = c('name','id','score'),
direction='long',
varying = )
test1 <- test[,c(1,2)]
View(test1)
unstack(test1)
reshape(test, idvar='file', timevar = 'name')
reshape(test, idvar='file', timevar = 'name', direction = 'wide')
test_re <- reshape(test, idvar='file', timevar = 'name', direction = 'wide')
View(test_re)
View(test)
test_re <- reshape(test1, idvar='file', timevar = 'name', direction = 'wide')
library(purrr)
test_re <- map(test, function(x){
unstack(test)
})
test_re <- map(test1, function(x){
unstack(x)
})
test2 <- data.frame(test1[,2])
test1[,2]
test1[1,2]
test2 <- data.frame(test1[1,2])
View(test2)
test2 <- flatten(test1)
View(test1)
View(test2)
library(dplyr)
library(tidyr)
library(stringr)
test_prepped <- test %>%
mutate(
name  = str_remove_all(name, "^c\\(|\\)$"),  # remove leading c( and trailing )
name  = str_split(name, ",\\s*"),           # split on commas
id    = str_remove_all(id, "^c\\(|\\)$"),
id    = str_split(id, ",\\s*"),
score = str_remove_all(score, "^c\\(|\\)$"),
score = str_split(score, ",\\s*")
)
test_long <- test_prepped %>%
unnest(cols = c(name, id, score))
View(test)
View(test_prepped)
View(test_long)
test_long2 <- test %>%
unnest(cols = c(name, id, score))
View(test_long2)
test_long <- test %>%
unnest(cols = c(name, id, score))
merged_df_test <- tasks_df %>%
left_join(test_long, by = c('plantnet_id'='file'))
View(merged_df_test)
View(samples)
samples <- test %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
unnest(cols = c(name, id, score))
samples <- fromJSON("data/samples.json")
samples$file <- sub("\\.json$", "", samples$file)
samples <- samples %>%
unnest(cols = c(name, id, score))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
View(merged_df)
samples <- samples %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
mutate(
name = if (!is.list(name)) list(name) else name,
id   = if (!is.list(id)) list(id) else id,
score = if (!is.list(score)) list(score) else score
) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
mutate(
name  = str_remove_all(name, "^c\\(|\\)$"),  # remove leading c( and trailing )
name  = str_split(name, ",\\s*"),           # split on commas
id    = str_remove_all(id, "^c\\(|\\)$"),
id    = str_split(id, ",\\s*"),
score = str_remove_all(score, "^c\\(|\\)$"),
score = str_split(score, ",\\s*")
)
samples <- samples %>%
unnest(cols = c(name, id, score))
lengths(samples$name[[18]])
lengths(samples$id[[18]])
lengths(samples$score[[18]])
samples_fixed <- samples %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
View(samples_fixed)
merged_df <- tasks_df %>%
left_join(samples, by = c('plantnet_id'='file'))
samples <- samples %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
merged_df <- tasks_df %>%
left_join(samples, by = c('plantnet_id'='file'))
View(merged_df)
View(tasks_df)
merged_df <- merge(tasks_df, samples, by.x = 'plantnet_id', by.x = 'file')
merged_df <- merge(tasks_df, samples, by.x = 'plantnet_id', by.y = 'file')
View(merged_df)
unmatched_in_samples <- anti_join(samples, tasks_df, by = c("file" = "plantnet_id"))
unmatched_in_tasks <- anti_join(tasks_df, samples, by = c("plantnet_id" = "file"))
View(unmatched_in_tasks)
View(unmatched_in_samples)
test <- merged_df %>% group_by(c('plantnet_id','plant_swe_id'))
test <- merged_df %>% nest(.by = c('plantnet_id', 'plant_swe_id'))
View(test)
View(test[[3]][[1]])
test <- merged_df %>% group_by(plantnet_id)
test <- merged_df %>% select(plantnet_id, plant_swe_id, name, id, socre) %>% group_by(plantnet_id)
test <- merged_df %>% select(plantnet_id, plant_swe_id, name, id, score) %>% group_by(plantnet_id)
test <- merged_df %>% select(plantnet_id, plant_swe_id, name, id, score) %>% group_by(plantnet_id)
test <- merged_df %>% select(plantnet_id, plant_swe_id, name, id, score) %>% group_by(plantnet_id, plant_swe_id)
test <- merged_df %>% nest(.by = c('plantnet_id', 'plant_swe_id'))
test <- merged_df %>%
nest(.by = c("plantnet_id", "plant_swe_id")) %>%
mutate(
name  = map(data, "name"),
id    = map(data, "id"),
score = map(data, "score")
) %>%
select(-data)
merged_df <- merged_df %>%
nest(.by = c("plantnet_id", "plant_swe_id")) %>%
mutate(
name  = map(data, "name"),
id    = map(data, "id"),
score = map(data, "score")
) %>%
select(-data)
gc()
library(jsonlite)
library(dplyr)
library(tidyr)
tasks <- fromJSON("data/tasks.json")
tasks_df <- data.frame(
plant_swe_id = sapply(tasks, function(x) x[[1]]),
stringsAsFactors = FALSE
)
tasks_df <- rownames_to_column(tasks_df, var = "plantnet_id")
samples <- fromJSON("data/samples.json")
samples$file <- sub("\\.json$", "", samples$file)
samples <- samples %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
rowwise() %>%
mutate(
name = if (!is.list(name)) list(name) else name,
id   = if (!is.list(id)) list(id) else id,
score = if (!is.list(score)) list(score) else score
) %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
mutate(
name = map(name, ~ if (!is.list(.x)) list(.x) else .x)
id = map(id, ~ if (!is.list(.x)) list(.x) else .x)
samples <- samples %>%
mutate(
name = map(name, if (!is.list(.x)) list(.x) else .x),
id = map(id, if (!is.list(.x)) list(.x) else .x),
score = map(score, if (!is.list(.x)) list(.x) else .x)
) %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
mutate(
name = map(name, if (!is.list(name)) list(name) else name),
id = map(id, if (!is.list(id)) list(id) else id),
score = map(score, if (!is.list(score)) list(score) else score)
) %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
mutate(
name = purrr::map(name, ~ if (!is.list(.x)) list(.x) else .x),
id = purrr:map(id, ~ if (!is.list(.x)) list(.x) else .x)
score = purrr:map(score, ~ if (!is.list(.x)) list(.x) else .x)
samples <- samples %>%
mutate(
name = purrr::map(name, function(.x){if (!is.list(.x)) list(.x) else .x}),
id = purrr:map(id, function(.x){if (!is.list(.x)) list(.x) else .x}),
score = purrr:map(score, function(.x){if (!is.list(.x)) list(.x) else .x})
) %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
library(purrr)
samples <- samples %>%
mutate(
name = purrr::map(name, function(.x){if (!is.list(.x)) list(.x) else .x}),
id = purrr:map(id, function(.x){if (!is.list(.x)) list(.x) else .x}),
score = purrr:map(score, function(.x){if (!is.list(.x)) list(.x) else .x})
) %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
library(purrr)
samples <- samples %>%
mutate(
name = purrr::map(name, function(.x){if (!is.list(.x)) list(.x) else .x}),
id = purrr:map(id, function(.x){if (!is.list(.x)) list(.x) else .x}),
score = purrr:map(score, function(.x){if (!is.list(.x)) list(.x) else .x})
) %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- samples %>%
mutate(
name = purrr::map(name, function(.x){if (!is.list(.x)) list(.x) else .x}),
id = purrr::map(id, function(.x){if (!is.list(.x)) list(.x) else .x}),
score = purrr::map(score, function(.x){if (!is.list(.x)) list(.x) else .x})
) %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
samples <- fromJSON("data/samples.json")
samples$file <- sub("\\.json$", "", samples$file)
samples <- samples %>%
mutate(
name = purrr::map(name, function(.x){if (!is.list(.x)) list(.x) else .x}),
id = purrr::map(id, function(.x){if (!is.list(.x)) list(.x) else .x}),
score = purrr::map(score, function(.x){if (!is.list(.x)) list(.x) else .x})
) %>%
rowwise() %>%
mutate(
min_len = min(length(name), length(id), length(score)),
name = list(name[1:min_len]),
id = list(id[1:min_len]),
score = list(score[1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
name[[1]]
samples <- samples %>%
mutate(
name = purrr::map(name, function(.x){if (!is.list(.x)) list(.x) else .x}),
id = purrr::map(id, function(.x){if (!is.list(.x)) list(.x) else .x}),
score = purrr::map(score, function(.x){if (!is.list(.x)) list(.x) else .x})
) %>%
rowwise() %>%
mutate(
min_len = min(length(name[[1]]), length(id[[1]]), length(score[[1]])),
name = list(name[[1]][1:min_len]),
id = list(id[[1]][1:min_len]),
score = list(score[[1]][1:min_len])
) %>%
ungroup() %>%
select(-min_len) %>%
unnest(cols = c(name, id, score))
merged_df <- merge(tasks_df, samples, by.x = 'plantnet_id', by.y = 'file')
merged_df <- merged_df %>%
nest(.by = c("plantnet_id", "plant_swe_id")) %>%
mutate(
name  = map(data, "name"),
id    = map(data, "id"),
score = map(data, "score")
) %>%
select(-data)
write_json(merged_df, 'data/merged_samples.json', pretty=TRUE)
test <- merge(samples, tasks_df, by.x = 'file', by.y = 'plantnet_id')
View(test)
test <- anti_join(samples, tasks_df)
test <- anti_join(samples, tasks_df, 'plantnet_id'='plant_swe_id')
View(tasks_df)
test <- anti_join(samples, tasks_df, by.x='plantnet_id', by.y='file')
test <- anti_join(samples, tasks_df, join.by(by.x=plantnet_id==file))
test <- anti_join(samples, tasks_df, join_by(by.x=plantnet_id==file))
test <- anti_join(samples, tasks_df, join_by(plantnet_id==file))
test <- anti_join(samples, tasks_df, join_by(file==plantnet_id))
View(test)
test <- semi_join(samples, tasks_df, join_by(file==plantnet_id))
test <- anti_join(samples, tasks_df, join_by(file==plantnet_id))
test2 <- anti_join(tasks_df, samples, join_by(plantnet_id==file))
View(test2)
