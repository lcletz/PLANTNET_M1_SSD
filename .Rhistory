library(ggplot2)
library(dplyr)
library(tidyr)
Sys.setenv(DISPLAY=":0")
print(
ggplot(ai_scores_df, aes(x = score)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution des scores IA", x = "Score", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
library(dplyr)
library(tidyr)
Sys.setenv(DISPLAY=":0")
print(
ggplot(ai_scores, aes(x = score)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution des scores IA", x = "Score", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
library(dplyr)
library(tidyr)
Sys.setenv(DISPLAY=":0")
print(
ggplot(ai_scores, aes(x = score)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution des scores IA", x = "Score", y = "Fréquence") +
theme_minimal()
)
View(ai_scores)
# Transformer la liste en data.frame
ai_scores_df <- data.frame(score = unlist(ai_scores))
# Vérifier que les données sont bien en data.frame
print(str(ai_scores_df))
print(head(ai_scores_df))
# Tracer un histogramme
library(ggplot2)
print(
ggplot(ai_scores_df, aes(x = score)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution des scores IA", x = "Score", y = "Fréquence") +
theme_minimal()
)
# Transformer la liste en data.frame
ai_scores_df <- data.frame(score = unlist(ai_scores))
# Vérifier que les données sont bien en data.frame
print(str(ai_scores_df))
print(head(ai_scores_df))
# Tracer un histogramme
library(ggplot2)
print(
ggplot(ai_scores_df, aes(x = score)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution des scores IA", x = "Score", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
# Créer un data.frame avec l'index et le score
ai_scores_df <- data.frame(
index = 0:(length(ai_scores) - 1),  # Créer une colonne index
score = unlist(ai_scores)           # Ajouter les scores
)
# Vérifier la structure des données
print(str(ai_scores_df))
# Créer un nuage de points (scatter plot)
print(
ggplot(ai_scores_df, aes(x = index, y = score)) +
geom_point(color = "blue") +       # Points bleus
labs(title = "Nuage de points des scores IA", x = "Index", y = "Score") +
theme_minimal()
)
library(ggplot2)
# Convertir `ai_classes` en data.frame
ai_classes_df <- data.frame(
plant = names(ai_classes),   # Noms des plantes
class = unlist(ai_classes)   # Valeurs associées (classes)
)
# Vérifier la structure des données
print(str(ai_classes_df))
print(head(ai_classes_df))
# Créer un nuage de points (scatter plot)
print(
ggplot(ai_classes_df, aes(x = plant, y = class)) +
geom_point(color = "red") +            # Points rouges
labs(title = "Nuage de points des classes de plantes", x = "Plante", y = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotation des étiquettes
)
library(ggplot2)
# Convertir `ai_classes` en data.frame
ai_classes_df <- data.frame(
plant = names(ai_classes),   # Noms des plantes
class = unlist(ai_classes)   # Valeurs associées (classes)
)
# Vérifier la structure des données
print(str(ai_classes_df))
print(head(ai_classes_df))
# Créer un histogramme
print(
ggplot(ai_classes_df, aes(x = class)) +
geom_histogram(binwidth = 1, fill = "green", color = "black", alpha = 0.7) +  # Histogramme vert
labs(title = "Histogramme des classes de plantes", x = "Classe", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
# Convertir `ai_classes` en data.frame
ai_classes_df <- data.frame(
plant = names(ai_classes),   # Noms des plantes
class = unlist(ai_classes)   # Valeurs associées (classes)
)
# Limiter les données aux 20 premières plantes (par exemple)
ai_classes_limited <- ai_classes_df[1:20, ]
# Créer un histogramme
print(
ggplot(ai_classes_limited, aes(x = class)) +
geom_histogram(binwidth = 1, fill = "green", color = "black", alpha = 0.7) +  # Histogramme vert
labs(title = "Histogramme des classes de plantes (limitées aux 20 premières)", x = "Classe", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
# Convertir `ai_classes` en data.frame
ai_classes_df <- data.frame(
plant = names(ai_classes),   # Noms des plantes
class = unlist(ai_classes)   # Valeurs associées (classes)
)
# Limiter les données aux 20 premières plantes (par exemple)
ai_classes_limited <- ai_classes_df[1:20, ]
# Créer un nuage de points pour les 20 premières plantes
print(
ggplot(ai_classes_limited, aes(x = plant, y = class)) +
geom_point(color = "red") +          # Points rouges
labs(title = "Nuage de points des classes de plantes (limitées aux 20 premières)", x = "Plante", y = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotation des étiquettes
library(ggplot2)
# Convertir `ai_classes` en data.frame
ai_classes_df <- data.frame(
plant = names(ai_classes),   # Noms des plantes
class = unlist(ai_classes)   # Valeurs associées (classes)
)
# Limiter les données aux 20 premières plantes (par exemple)
ai_classes_limited <- ai_classes_df[1:20, ]
# Créer un nuage de points pour les 20 premières plantes
print(
ggplot(ai_classes_limited, aes(x = plant, y = class)) +
geom_point(color = "red") +          # Points rouges
labs(title = "Nuage de points des classes de plantes (limitées aux 20 premières)", x = "Plante", y = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))# Rotation des étiquettes
)
library(ggplot2)
# Convertir `ai_classes` en data.frame
ai_classes_df <- data.frame(
plant = names(ai_classes),   # Noms des plantes
class = unlist(ai_classes)   # Valeurs associées (classes)
)
# Limiter les données aux 20 premières plantes (par exemple)
ai_classes_limited <- ai_classes_df[1:20, ]
# Créer un histogramme avec des bins de taille 2
print(
ggplot(ai_classes_df, aes(x = class)) +
geom_histogram(binwidth = 2, fill = "blue", color = "black", alpha = 0.7) +  # Histogramme avec bins de 2
labs(title = "Histogramme des classes de plantes", x = "Classe", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
# Convertir `ai_answers` en data.frame
ai_answers_df <- data.frame(
answer = names(ai_answers),  # Clés, qui seront utilisées comme des catégories
count = unlist(ai_answers)   # Valeurs numériques associées (fréquences)
)
# Vérifier la structure des données
print(str(ai_answers_df))
print(head(ai_answers_df))
# Limiter les données aux 20 premières lignes pour rendre l'histogramme plus lisible
ai_answers_limited <- ai_answers_df[1:20, ]
# Créer l'histogramme des réponses
print(
ggplot(ai_answers_limited, aes(x = count)) +
geom_histogram(binwidth = 500, fill = "purple", color = "black", alpha = 0.7) +  # Histogramme violet
labs(title = "Histogramme des réponses IA (limitées aux 20 premières)", x = "Réponse", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
# Convertir `ai_answers` en data.frame
ai_answers_df <- data.frame(
answer = names(ai_answers),  # Clés, qui seront utilisées comme des catégories
count = unlist(ai_answers)   # Valeurs numériques associées (fréquences)
)
# Vérifier la structure des données
print(str(ai_answers_df))
print(head(ai_answers_df))
# Limiter les données aux 20 premières lignes pour rendre l'histogramme plus lisible
ai_answers_limited <- ai_answers_df[1:20, ]
# Créer un nuage de points pour les 20 premières réponses
print(
ggplot(ai_answers_limited, aes(x = answer, y = count)) +
geom_point(color = "orange") +           # Points orange
labs(title = "Nuage de points des réponses IA (limitées aux 20 premières)", x = "Réponse", y = "Fréquence") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotation des étiquettes
)
#install.packages("jsonlite")
library(jsonlite)
ai_answers <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/aggregation/ai_answers.json")
ai_classes <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/aggregation/ai_classes.json")
ai_scores <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/aggregation/ai_scores.json")
k_southwestern <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/aggregation/k-southwestern-europe.json")
answers <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/answers/answers.json")
classes <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/converters/classes.json")
tasks <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/converters/tasks.json")
print(dim(ai_scores))  # Doit afficher des dimensions non nulles
print(head(ai_scores)) # Doit afficher des données
# Transformer la liste en data.frame
ai_scores_df <- data.frame(score = unlist(ai_scores))
# Vérifier que les données sont bien en data.frame
print(str(ai_scores_df))
print(head(ai_scores_df))
# Tracer un histogramme
library(ggplot2)
print(
ggplot(ai_scores_df, aes(x = score)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribution des scores IA", x = "Score", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
# Créer un data.frame avec l'index et le score
ai_scores_df <- data.frame(
index = 0:(length(ai_scores) - 1),  # Créer une colonne index
score = unlist(ai_scores)           # Ajouter les scores
)
# Vérifier la structure des données
print(str(ai_scores_df))
# Créer un nuage de points (scatter plot)
print(
ggplot(ai_scores_df, aes(x = index, y = score)) +
geom_point(color = "blue") +       # Points bleus
labs(title = "Nuage de points des scores IA", x = "Index", y = "Score") +
theme_minimal()
)
library(ggplot2)
# Convertir `ai_classes` en data.frame
ai_classes_df <- data.frame(
plant = names(ai_classes),   # Noms des plantes
class = unlist(ai_classes)   # Valeurs associées (classes)
)
# Limiter les données aux 20 premières plantes (par exemple)
ai_classes_limited <- ai_classes_df[1:20, ]
# Créer un nuage de points pour les 20 premières plantes
print(
ggplot(ai_classes_limited, aes(x = plant, y = class)) +
geom_point(color = "red") +          # Points rouges
labs(title = "Nuage de points des classes de plantes (limitées aux 20 premières)", x = "Plante", y = "Classe") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))# Rotation des étiquettes
)
library(ggplot2)
# Convertir `ai_answers` en data.frame
ai_answers_df <- data.frame(
answer = names(ai_answers),  # Clés, qui seront utilisées comme des catégories
count = unlist(ai_answers)   # Valeurs numériques associées (fréquences)
)
# Vérifier la structure des données
print(str(ai_answers_df))
print(head(ai_answers_df))
# Limiter les données aux 20 premières lignes pour rendre l'histogramme plus lisible
ai_answers_limited <- ai_answers_df[1:20, ]
# Créer l'histogramme des réponses
print(
ggplot(ai_answers_limited, aes(x = count)) +
geom_histogram(binwidth = 500, fill = "purple", color = "black", alpha = 0.7) +  # Histogramme violet
labs(title = "Histogramme des réponses IA (limitées aux 20 premières)", x = "Réponse", y = "Fréquence") +
theme_minimal()
)
library(ggplot2)
# Convertir `ai_answers` en data.frame
ai_answers_df <- data.frame(
answer = names(ai_answers),  # Clés, qui seront utilisées comme des catégories
count = unlist(ai_answers)   # Valeurs numériques associées (fréquences)
)
# Vérifier la structure des données
print(str(ai_answers_df))
print(head(ai_answers_df))
# Limiter les données aux 20 premières lignes pour rendre l'histogramme plus lisible
ai_answers_limited <- ai_answers_df[1:20, ]
# Créer un nuage de points pour les 20 premières réponses
print(
ggplot(ai_answers_limited, aes(x = answer, y = count)) +
geom_point(color = "orange") +           # Points orange
labs(title = "Nuage de points des réponses IA (limitées aux 20 premières)", x = "Réponse", y = "Fréquence") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotation des étiquettes
)
# Extraire les données de answers.json (structure imbriquée)
answers_flat <- unlist(answers, use.names = TRUE)  # Aplatir les données
# Créer un data.frame avec les réponses et les fréquences
answers_df <- data.frame(
answer = names(answers_flat),  # Les réponses (clés)
frequency = as.numeric(answers_flat)  # Les fréquences (valeurs)
)
# Vérifier la structure des données
print(str(answers_df))
print(head(answers_df))
# Limiter les données aux 20 premières réponses pour l'histogramme
answers_limited <- answers_df[1:20, ]
# Créer un histogramme des fréquences
print(
ggplot(answers_limited, aes(x = frequency)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +  # Histogramme bleu
labs(title = "Histogramme des fréquences des réponses", x = "Fréquence", y = "Nombre de réponses") +
theme_minimal()
)
# Extraire les données de answers.json (structure imbriquée)
answers_flat <- unlist(answers, use.names = TRUE)  # Aplatir les données
# Créer un data.frame avec les réponses et les fréquences
answers_df <- data.frame(
answer = names(answers_flat),  # Les réponses (clés)
frequency = as.numeric(answers_flat)  # Les fréquences (valeurs)
)
# Vérifier la structure des données
print(str(answers_df))
print(head(answers_df))
# Limiter les données aux 20 premières réponses pour l'histogramme
answers_limited <- answers_df[1:20, ]
# Créer un nuage de points pour les 20 premières réponses
print(
ggplot(answers_limited, aes(x = answer, y = frequency)) +
geom_point(color = "green") +           # Points verts
labs(title = "Nuage de points des réponses", x = "Réponse", y = "Fréquence") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotation des étiquettes
)
# Charger les données
k_southwestern <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/aggregation/k-southwestern-europe.json")
# Extraire les informations sur les espèces et le nombre de synonymes
species_data <- data.frame(
species = sapply(k_southwestern, function(x) x$species),  # Noms des espèces
num_synonyms = sapply(k_southwestern, function(x) length(x$synonyms))  # Nombre de synonymes pour chaque espèce
)
# Charger les données
k_southwestern <- fromJSON("//wsl$/Ubuntu/home/anne-laure/projet/PLANTNET_M1_SSD/extracted_data/aggregation/k-southwestern-europe.json")
# Extraire les informations sur les espèces et le nombre de synonymes
species_data <- data.frame(
species = sapply(k_southwestern, function(x) x$species),  # Noms des espèces
num_synonyms = sapply(k_southwestern, function(x) length(x$synonyms))  # Nombre de synonymes pour chaque espèce
)
# Vérifier la structure des données
str(k_southwestern)
# Afficher un extrait des données pour comprendre leur organisation
print(head(k_southwestern))
# Compter le nombre de synonymes pour chaque espèce
num_synonyms <- sapply(k_southwestern$synonyms, length)
# Créer un data.frame avec le nombre de synonymes
species_synonyms <- data.frame(
species = k_southwestern$species,
num_synonyms = num_synonyms
)
# Vérifier la structure du nouveau data.frame
print(head(species_synonyms))
# Créer l'histogramme
library(ggplot2)
ggplot(species_synonyms, aes(x = num_synonyms)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribution du nombre de synonymes par espèce",
x = "Nombre de synonymes",
y = "Fréquence") +
theme_minimal()
# Créer un nuage de points du nombre de synonymes par espèce
ggplot(species_synonyms, aes(x = species, y = num_synonyms)) +
geom_point(color = "blue", alpha = 0.6) +
labs(title = "Nuage de points du nombre de synonymes par espèce",
x = "Espèce",
y = "Nombre de synonymes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Inclinaison des labels des espèces
theme_minimal()
# Calculer le nombre de synonymes pour chaque espèce
species_synonyms <- k_southwestern[, c("species", "synonyms")]
species_synonyms$num_synonyms <- sapply(species_synonyms$synonyms, length)
# Trier les espèces par nombre de synonymes, du plus grand au plus petit
top_species <- species_synonyms %>%
arrange(desc(num_synonyms)) %>%
head(10)  # Sélectionner les 10 premières espèces avec le plus de synonymes
# Créer un nuage de points des 10 espèces avec le plus grand nombre de synonymes
ggplot(top_species, aes(x = species, y = num_synonyms)) +
geom_point(color = "blue", alpha = 0.6) +
labs(title = "Nuage de points des 10 espèces les plus courantes par nombre de synonymes",
x = "Espèce",
y = "Nombre de synonymes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Inclinaison des labels des espèces
theme_minimal()
# Extraire les données de answers.json (structure imbriquée)
classes_flat <- unlist(classes, use.names = TRUE)  # Aplatir les données
# Créer un data.frame avec les réponses et les fréquences
answers_df <- data.frame(
classes = names(classes_flat),  # Les réponses (clés)
frequency = as.numeric(classes_flat)  # Les fréquences (valeurs)
)
# Aplatir les données imbriquées
classes_flat <- unlist(classes, use.names = TRUE)  # Cela aplati les listes imbriquées
# Créer un data.frame avec les réponses et les fréquences
answers_df <- data.frame(
classes = names(classes_flat),  # Les clés du JSON (réponses)
frequency = as.numeric(classes_flat)  # Les fréquences des réponses (valeurs)
)
# Afficher un aperçu du data.frame
head(answers_df)
# Charger ggplot2 si ce n'est pas encore fait
library(ggplot2)
# Créer l'histogramme
ggplot(answers_df, aes(x = frequency)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogramme des fréquences des classes", x = "Fréquence", y = "Nombre de classes") +
theme_minimal()
# Filtrer les classes avec une fréquence supérieure à un seuil
threshold <- 100
filtered_df <- answers_df[answers_df$frequency > threshold, ]
# Créer l'histogramme avec les données filtrées
ggplot(filtered_df, aes(x = frequency)) +
geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
labs(title = "Histogramme des fréquences des classes (filtrées)", x = "Fréquence", y = "Nombre de classes") +
theme_minimal()
# Trier les données par fréquence (ordre décroissant)
sorted_df <- answers_df[order(-answers_df$frequency), ]
# Sélectionner les 50 premières lignes
top_50_df <- head(sorted_df, 50)
# Créer l'histogramme avec les 50 classes les plus fréquentes
ggplot(top_50_df, aes(x = frequency)) +
geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
labs(title = "Histogramme des 50 classes les plus fréquentes", x = "Fréquence", y = "Nombre de classes") +
theme_minimal()
# Créer le nuage de points avec les 50 classes les plus fréquentes
ggplot(top_50_df, aes(x = classes, y = frequency)) +
geom_point(color = "blue", size = 3) +
labs(title = "Nuage de points des 50 classes les plus fréquentes",
x = "Classes",
y = "Fréquence") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convertir le JSON en data.frame
tasks_df <- data.frame(
task_id = names(tasks),  # Les identifiants des tâches (les clés)
index = as.numeric(tasks)  # Les indices des tâches (les valeurs)
)
# Visualiser un échantillon de données
head(tasks_df)
# Créer un histogramme pour voir la distribution des indices des tâches
ggplot(tasks_df, aes(x = index)) +
geom_histogram(bins = 20, fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = "Distribution des indices des tâches", x = "Indice", y = "Fréquence") +
theme_minimal()
# Créer un nuage de points pour visualiser la répartition des tâches et indices
ggplot(tasks_df, aes(x = task_id, y = index)) +
geom_point(color = "orange") +
labs(title = "Répartition des tâches par indice", x = "Identifiant de tâche", y = "Indice") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotation des labels d'axes
# Assumer que vous avez une variable "classes_df" issue de la transformation de "classes.json"
tasks_df$class <- classes_df$classes[match(tasks_df$index, classes_df$index)]  # Associer chaque tâche à sa classe
# Assumer que vous avez une variable "classes_df" issue de la transformation de "classes.json"
tasks_df$class <- classes_flat$classes[match(tasks_df$index, classes_df$index)]  # Associer chaque tâche à sa classe
# Assumer que vous avez une variable "classes_df" issue de la transformation de "classes.json"
tasks_df$class <- classes_flat[match(tasks_df$index, classes_df$index)]  # Associer chaque tâche à sa classe
# Assumer que vous avez une variable "classes_df" issue de la transformation de "classes.json"
tasks_df$class <- classes_flat[match(tasks_df$index, classes_flat$index)]  # Associer chaque tâche à sa classe
# Assumer que vous avez une variable "classes_df" issue de la transformation de "classes.json"
tasks_df$class <- classes_flat[match(tasks_df$index, classes_flat]  # Associer chaque tâche à sa classe
# Assumer que vous avez une variable "classes_df" issue de la transformation de "classes.json"
tasks_df <- classes_flat[match(tasks_df, classes_flat]  # Associer chaque tâche à sa classe
# Appliquer un clustering K-means pour regrouper les tâches par indices
kmeans_result <- kmeans(tasks_df[, c("index", "frequency")], centers = 3)
# Créer un data.frame avec les scores et les réponses associées
combined_df <- data.frame(
score = unlist(ai_scores),
count = unlist(ai_answers)
)
# Créer un nuage de points entre les scores et les réponses
ggplot(combined_df, aes(x = score, y = count)) +
geom_point(color = "purple") +
labs(title = "Relation entre les scores IA et les fréquences des réponses", x = "Score IA", y = "Fréquence des réponses") +
theme_minimal()
# Joindre les classes aux tâches (en utilisant le même index)
tasks_with_classes <- data.frame(
task_id = names(tasks),
class = ai_classes_df$class[match(names(tasks), ai_classes_df$plant)]
)
ggplot(tasks_with_classes, aes(x = task_id, y = class)) +
geom_point(color = "green") +
labs(title = "Répartition des tâches par classe de plante", x = "Identifiant de tâche", y = "Classe de plante") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
species_classes_df <- data.frame(
species = k_southwestern$species,
class = ai_classes_df$class[match(k_southwestern$species, ai_classes_df$plant)]
)
ggplot(species_classes_df, aes(x = species, y = class)) +
geom_point(color = "red") +
labs(title = "Répartition des espèces par classe de plante", x = "Espèce", y = "Classe de plante") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_minimal()
# Combine les scores IA, les réponses et les classes des plantes
complex_df <- data.frame(
task_id = names(tasks),
score = unlist(ai_scores),
class = ai_classes_df$class[match(names(tasks), ai_classes_df$plant)],
count = unlist(ai_answers)
)
# Créer un graphique en nuage de points montrant les relations entre toutes les variables
ggplot(complex_df, aes(x = score, y = count, color = class)) +
geom_point() +
labs(title = "Relation entre scores IA, réponses et classes de plantes", x = "Score IA", y = "Fréquence des réponses") +
theme_minimal()
